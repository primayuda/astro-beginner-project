---

type Props = {
  title: string 
}

import { ViewTransitions } from "astro:transitions";
import "../styles/global.css";

import Footer from "../components/Footer.astro";
import NavigationBar from "../components/NavigationBar.astro";

const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    {/* Add a new meta description tag */}
    <meta name="description" content="Frau Katarina's website" />
    {/** ðŸ‘€ Look here ... for adding font */}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
    />

    {/* Title is props. */}
    <title>{title}</title>
    <!-- ... -->    
    <!-- ðŸ‘€ add is:inline -->
    <script is:inline>
        const DARK_THEME_CLASS = "dark";
        const COLOUR_MODE = "COLOUR_MODE";
        const LIGHT_THEME = "LIGHT";
        const DARK_THEME = "DARK";
        const rootEl = document.documentElement;
        const getInitialColourMode = () => {
          /** Get colour mode from local storage **/
            const previouslySavedColourMode = window.localStorage.getItem(COLOUR_MODE);
            if (previouslySavedColourMode) {
            return previouslySavedColourMode;
            }
            /** Does the user prefer dark mode, e.g., through an operating system or user agent setting? */
            if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return DARK_THEME;
            }
            /** Default to the light theme */
            return LIGHT_THEME;
        }
        const initialColourMode = getInitialColourMode();
        // ðŸ‘€ remove string type on mode 
        const setInitialColourMode = (mode) => {
            if (mode === LIGHT_THEME) {
                rootEl.classList.remove(DARK_THEME_CLASS);
                } else {
                rootEl.classList.add(DARK_THEME_CLASS);
                }
        };
        /** Set the initial colour mode as soon as the script is executed */
        setInitialColourMode(initialColourMode);
      </script>
  </head>
  <body>
    <main>
        <NavigationBar />
        {/* We want the content of each page to go here */}
        <slot />
       
        <Footer />
    </main>
  </body>
</html>


